from pyrogram import Client, filters
from helps.modules import add_module, add_command
from helps.get_prefix import get_prefix
from helps.scripts import get_lang

lang = get_lang()
prefix = get_prefix()


class Texts:
    @staticmethod
    def get_texts(log=None, info=None):
        return {
            "errors": {
                "index": {
                    "ru": "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–∏–±–æ –æ—Ç–≤–µ—Ç–æ–º –ª–∏–±–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —é–∑–µ—Ä–Ω–µ–π–º/–∞–π–¥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã",
                    "en": "This command must be used either as a response or the username/id must be specified after the command"
                },
                "log": {
                    "ru": f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! LOG:\n{log}",
                    "en": f"An error has occurred! LOG:\n{log}"
                }
            },
            "info": {
                "ru": f"""
üë§ {info.mention}
<b>‚îú  –ê–π–¥–∏:</b> <code>{info.id}</code>
<b>‚îú  –Æ–∑–µ—Ä–Ω–µ–π–º:</b> <code>@{info.username}</code>
<b>‚îú  –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> {info.mention}
<b>‚îú  –ò–º—è:</b> <code>{info.first_name}</code>
<b>‚îú  –ë–æ—Ç:</b> <code>{info.is_bot}</code>
<b>‚îú  –ö–æ–Ω—Ç–∞–∫—Ç:</b> <code>{info.is_contact}</code>
<b>‚îú  –í–∑–∞–∏–º–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:</b> <code>{info.is_mutual_contact}</code>
<b>‚îú  –£–¥–∞–ª—ë–Ω:</b> <code>{info.is_deleted}</code>
<b>‚îú  –°–∫–∞–º:</b> <code>{info.is_scam}</code>
<b>‚îú  –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞:</b> <code>{info.is_premium}</code>
<b>‚îú  –°—Ç–∞—Ç—É—Å:</b> <code>{str(info.status).replace("UserStatus.", "")}</code>
<b>‚îî  –î–∞—Ç–∞-—Ü–µ–Ω—Ç—Ä:</b> <code>{info.dc_id}</code>
    """.replace("True", "–¥–∞").replace("False", "–Ω–µ—Ç"),
                "en": f"""
üë§ {info.mention}
<b>‚îú  ID:</b> <code>{info.id}</code>
<b>‚îú  USERNAME:</b> <code>@{info.username}</code>
<b>‚îú  MENTION:</b> {info.mention}
<b>‚îú  NAME:</b> <code>{info.first_name}</code>
<b>‚îú  IS BOT:</b> <code>{info.is_bot}</code>
<b>‚îú  CONTACT:</b> <code>{info.is_contact}</code>
<b>‚îú  MUTUAL CONTACT:</b> <code>{info.is_mutual_contact}</code>
<b>‚îú  DELETED:</b> <code>{info.is_deleted}</code>
<b>‚îú  SCAM:</b> <code>{info.is_scam}</code>
<b>‚îú  PREMIUM-SUBSCRIPTION:</b> <code>{info.is_premium}</code>
<b>‚îú  STATUS:</b> <code>{str(info.status).replace("UserStatus.", "")}</code>
<b>‚îú  DC:</b> <code>{info.dc_id}</code>
    """.replace("True", "yes").replace("False", "no")
            }
        }


@Client.on_message(filters.command("user_info", prefixes=prefix) & filters.me)
async def user_info(client, message):
    if message.reply_to_message:
        id = message.reply_to_message.from_user.id
    else:
        try:
            id = message.command[1]
        except IndexError:
            text_versions = Texts.get_texts()
            await message.edit(text_versions['errors']['index'][lang])
            return
    try:
        info = await client.get_users(id)
    except Exception as e:
        text_versions = Texts.get_texts(log=e)
        await message.edit(text_versions['error']['log'][lang])
        return

    text_versions = Texts.get_texts(info=info)
    await message.edit(text_versions['info'][lang])


if lang == "ru":
    add_module("user_info", __file__)
    add_command("user_info", f"{prefix}user_info",
                "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ª–∏–±–æ –æ—Ç–≤–µ—Ç–æ–º –ª–∏–±–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —é–∑–µ—Ä–Ω–µ–π–º/–∞–π–¥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
else:
    add_module("user_info", __file__)
    add_command("user_info", f"{prefix}user_info",
                "Get information about the user. This command must be used either as a response or the username/id must be specified after the command")
